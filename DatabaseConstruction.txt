CREATE DATABASE isr;
CREATE USER superuser WITH ENCRYPTED PASSWORD 'th3ri@nthr0pe';
GRANT ALL PRIVILEGES ON DATABASE isr TO superuser;
GRANT ALL ON SCHEMA public TO superuser;
CREATE USER participant_account WITH ENCRYPTED PASSWORD 'Aqrabu@m3lu';

//execute the below commands AFTER logging in to newly created isr database using newly created superuser account.

CREATE EXTENSION pgcrypto;

CREATE TABLE ideadomains (
  ideadomainid SERIAL PRIMARY KEY,
  ideadomainname VARCHAR,
  ideadomaincolorhex VARCHAR
);
CREATE TABLE ideas (
  ideasequence INT,
  ideaid VARCHAR PRIMARY KEY UNIQUE NOT NULL,
  ideadescription VARCHAR,
  ideadomain INT REFERENCES ideadomains(ideadomainid)
);
CREATE TABLE administrators (
  userid SERIAL PRIMARY KEY,
  firstname VARCHAR,
  lastname VARCHAR,
  username TEXT NOT NULL,
  password TEXT NOT NULL
);
CREATE TABLE offices (
  officeid SERIAL PRIMARY KEY,
  officename VARCHAR(255) UNIQUE
);
CREATE TABLE participants (
  participantid SERIAL PRIMARY KEY,
  participanttitle VARCHAR(6),
  participantfname VARCHAR(25),
  participantlname VARCHAR(25),
  participantoffice INT REFERENCES offices(officeid)
);
CREATE TABLE votes (
  voteid SERIAL PRIMARY KEY,
  voteideaid VARCHAR REFERENCES ideas(ideaid),
  voteparticipantid INT REFERENCES participants(participantid),
  votevalue INT,
  votetime TIMESTAMP,
  votemodified BOOLEAN
);
CREATE TABLE changelog (
  changeid SERIAL PRIMARY KEY,
  changevoteid INT,
  changepreviousvalue INT,
  changenewvalue INT,
  changetime TIMESTAMP,
  changeaction VARCHAR,
  changecomment TEXT
);
GRANT UPDATE,SELECT,INSERT ON votes TO participant_account;
GRANT UPDATE,SELECT,INSERT ON participants TO participant_account;
GRANT SELECT ON offices TO participant_account;
GRANT USAGE,SELECT ON SEQUENCE votes_voteid_seq TO participant_account;
GRANT USAGE,SELECT ON SEQUENCE participants_participantid_seq TO participant_account;

INSERT INTO administrators (
  firstname,
  lastname,
  username,
  password
)
VALUES (
  'Cliff',
  'Rosenberg',
  'carosenberg',
  crypt('Password1!', gen_salt('bf'))
);

CREATE OR REPLACE FUNCTION register_participant(title VARCHAR, fname VARCHAR, lname VARCHAR, office INT) RETURNS integer
LANGUAGE plpgsql
AS $$
  BEGIN 
    PERFORM * FROM participants 
    WHERE participanttitle=title
    AND participantfname=fname
    AND participantlname=lname
    AND participantoffice=office;
    
    IF NOT FOUND THEN
      INSERT INTO participants (
        participanttitle,
        participantfname,
        participantlname,
        participantoffice,
        participantloggedin
      )
      VALUES (title, fname, lname, office, 'false');
    END IF;
	
    RETURN (
      SELECT participantid
      FROM participants
      WHERE participanttitle=title
      AND participantfname=fname
      AND participantlname=lname
      AND participantoffice=office
    );
  END;
$$;

CREATE OR REPLACE FUNCTION login_participant(id INT) RETURNS TEXT
LANGUAGE plpgsql
AS $$
  BEGIN 
    PERFORM FROM participants
    WHERE participantoffice=(
      SELECT participantoffice
      FROM participants
      WHERE participantid=id
    )
    AND participantloggedin='true'
    AND participantid!=id;
    
    IF FOUND THEN
      RETURN('other_logged_in');
    END IF;
    
    IF NOT FOUND THEN
      PERFORM FROM participants 
      WHERE participantid=id;
	
      IF NOT FOUND THEN 
	  RETURN('not_found');
      END IF;
      
	IF FOUND THEN
        UPDATE participants 
        SET participantloggedin='true'
        WHERE participantid=id;
	  UPDATE participants
        SET participantloggedin='false' 
        WHERE participantoffice=(
          SELECT participantoffice 
          FROM participants
          WHERE participantid=id
         )
         AND participantid!=id;
	   RETURN(id);
 	END IF;
    END IF;
  END;
$$;

CREATE OR REPLACE FUNCTION submit_vote(idea VARCHAR, participant INT, vote INT, source TEXT, comment TEXT) RETURNS INT
LANGUAGE plpgsql
AS $$
BEGIN 
  PERFORM FROM votes
  WHERE voteideaid=idea
  AND voteparticipantid=participant;          
  
  IF FOUND THEN
    IF (source = 'admin') THEN
	INSERT INTO changelog (
        changevoteid,
	  changepreviousvalue,
        changenewvalue,
        changetime,
        changeaction,
        changecomment
      )
      VALUES (
        (
	    SELECT voteid 
	    FROM votes 
	    WHERE voteideaid=idea
	    AND voteparticipantid=participant
        ),
	  (
	    SELECT votevalue
	    FROM votes
	    WHERE voteideaid=idea
	    AND voteparticipantid=participant
        ),
        vote,
        (SELECT NOW()),
        'edit',
        comment
      );
     UPDATE votes
     SET 
       votevalue=vote,
       votetime=(SELECT NOW()),
	 votemodified=true
     WHERE voteideaid=idea
     AND voteparticipantid=participant;
    RETURN 1;    
    END IF;
    IF (source = 'user') THEN
      UPDATE votes
      SET votevalue=vote, votetime=(SELECT NOW())
      WHERE voteideaid=idea
      AND voteparticipantid=participant;
      RETURN 1;    
    END IF;
  END IF;

  IF NOT FOUND THEN 
    IF (source = 'user') THEN    
      INSERT INTO votes (
        voteideaid,
        voteparticipantid,
        votevalue,
	  votetime,
        votemodified
      )
      VALUES (idea, participant, vote,(SELECT NOW()),false);
      RETURN 1;
    END IF;
    IF (source = 'admin') THEN
	INSERT INTO votes (
        voteideaid,
        voteparticipantid,
        votevalue,
	  votetime,
        votemodified
      )
      VALUES (idea, participant, vote,(SELECT NOW()),true);
      INSERT INTO changelog (
        changevoteid,
        changenewvalue,
        changetime,
        changeaction,
        changecomment
      )
      VALUES (
        (
	    SELECT voteid 
	    FROM votes 
	    WHERE voteideaid=idea
	    AND voteparticipantid=participant
	  ),
        vote,
        (SELECT NOW()),
        'add',
        comment
      );
      RETURN 1;
    END IF;
  END IF;
  RETURN 0;
END;
$$;

CREATE OR REPLACE FUNCTION delete_vote(voteToDelete INT) RETURNS INT
LANGUAGE plpgsql
AS $$
BEGIN 
  PERFORM FROM votes WHERE voteid=voteToDelete;          
    
    IF FOUND THEN
      INSERT INTO changelog (
        changevoteid,
	  changepreviousvalue,
        changetime,
        changeaction,
        changecomment
      )
      VALUES (
        voteToDelete,
	  (SELECT votevalue FROM votes WHERE voteid=voteToDelete),
        (SELECT NOW()),
        'delete',
        'Vote deleted by administrator'
        );
	DELETE FROM votes WHERE voteid=voteToDelete;
	RETURN 1;
    END IF;
          
    IF NOT FOUND THEN
      RETURN -1;
    END IF;
RETURN 0;
END;
$$;